{"version":3,"sources":["components/Nav.js","components/Employees.js","components/Button.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["divStyle","height","Nav","className","style","href","Employees","props","employees","filter","employee","name","last","toLowerCase","includes","search","map","i","key","width","src","picture","large","alt","title","first","gender","email","phone","location","city","state","country","Button","color","marginRight","onClick","text","axios","get","styles","cardDiv","display","flexWrap","buttonDiv","App","useState","setEmployees","setSearch","useEffect","API","then","res","data","results","catch","err","console","log","type","placeholder","onChange","event","value","target","sort","a","b","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gRAGMA,G,MAAW,CACfC,OAAQ,UAaKC,EAVH,WACR,OACI,yBAAKC,UAAU,mDAAmDC,MAASJ,GAC7E,uBAAGG,UAAU,eAAeE,KAAK,KAAjC,wBC2BSC,MAjCf,SAAmBC,GAGjB,OACE,oCACGA,EAAMC,UAAUC,QAAO,SAACC,GAAD,OAAcA,EAASC,KAAKC,KAAKC,cAAcC,SAASP,EAAMQ,OAAOF,kBAAgBG,KAAI,SAACN,EAAUO,GAC1H,OACE,yBAAKd,UAAU,sBAAsBe,IAAKD,EAAGb,MAAO,CAAEe,MAAO,UAC3D,yBACEC,IAAKV,EAASW,QAAQC,MACtBnB,UAAU,eACVoB,IAAI,eAEN,yBAAKpB,UAAU,aACb,wBAAIA,UAAU,cACXO,EAASC,KAAKa,MADjB,IACyBd,EAASC,KAAKc,MAAO,IAC3Cf,EAASC,KAAKC,MAEjB,uBAAGT,UAAU,aAAb,WAAkCO,EAASgB,QAC3C,uBAAGvB,UAAU,aAAb,UAAiCO,EAASiB,OAC1C,uBAAGxB,UAAU,aAAb,WAAkCO,EAASkB,OAC3C,uBAAGzB,UAAU,aAAb,aACaO,EAASmB,SAASC,KAD/B,KACuCpB,EAASmB,SAASE,MADzD,IACiE,IAC9DrB,EAASmB,SAASG,gBCNpBC,EAnBA,SAAC1B,GAQd,OACE,4BACEJ,UAAS,gDAA2CI,EAAM2B,OAC1D9B,MATM,CACN+B,YAAa,OACbhB,MAAO,QAQPiB,QAAS7B,EAAM6B,SAEd7B,EAAM8B,O,iBCdE,EAEC,WACZ,OAAOC,IAAMC,IAAI,iDCEjBC,EAAS,CACXC,QAAS,CACPC,QAAS,OACTC,SAAU,QAEZC,UAAW,CACTF,QAAS,SAwEEG,MApEf,WAAgB,IAAD,EAEqBC,mBAAS,IAF9B,mBAENtC,EAFM,KAEKuC,EAFL,OAGeD,mBAAS,IAHxB,mBAGN/B,EAHM,KAGEiC,EAHF,KA8Cb,OAxCAC,qBAAU,WAgBRC,IACGC,MAAK,SAACC,GAAD,OAASL,EAAaK,EAAIC,KAAKC,YACpCC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAhB7B,IAEHP,qBAAU,WACRQ,QAAQC,IAAI3C,KACX,CAACA,IAmCF,6BACE,kBAAC,EAAD,MAEA,yBAAKZ,UAAU,aACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,wBAEf,2BAAOwD,KAAK,OAAOxD,UAAU,eAAeyD,YAAY,sBAAsBC,SAxCtF,SAA4BC,GAC1B,IAAMC,EAAQD,EAAME,OAAOD,MACdD,EAAME,OAAOrD,KAC1BqC,EAAUe,OAuCJ,yBAAK5D,UAAU,QACb,kBAAC,EAAD,CAAQkC,KAAM,YAAaD,QAAS,kBAjB5C5B,EAAUyD,MAAK,SAACC,EAAEC,GAAH,OACdD,EAAEvD,KAAKC,KAAOuD,EAAExD,KAAKC,MAAS,EAAI,UACjCmC,EAAa,YAAIvC,QAiBb,yBAAKL,UAAU,YAAYC,MAAOoC,EAAOC,SACvC,kBAAC,EAAD,CAAWjC,UAAWA,EAAWO,OAASA,QCjElCqD,QACW,cAA7BC,OAAOxC,SAASyC,UAEe,UAA7BD,OAAOxC,SAASyC,UAEhBD,OAAOxC,SAASyC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.9906d850.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst divStyle = {\r\n  height: \"100px\"\r\n}\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-secondary\" style = {divStyle}>\r\n      <a className=\"navbar-brand\" href=\"/\">\r\n        Employee Directory\r\n      </a>\r\n    </nav>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from \"react\";\r\n// import \"./style.css\";\r\n\r\n\r\nfunction Employees(props) {\r\n  // Setting our component's initial state\r\n \r\n  return (\r\n    <>\r\n      {props.employees.filter((employee) => employee.name.last.toLowerCase().includes(props.search.toLowerCase())).map((employee, i) => {\r\n        return (\r\n          <div className=\"card mt-5 mb-2 mr-4\" key={i} style={{ width: \"300px\" }}>\r\n            <img\r\n              src={employee.picture.large}\r\n              className=\"card-img-top\"\r\n              alt=\"notworking\"\r\n            />\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">\r\n                {employee.name.title} {employee.name.first}{\" \"}\r\n                {employee.name.last}\r\n              </h5>\r\n              <p className=\"card-text\">Gender: {employee.gender}</p>\r\n              <p className=\"card-text\">Email: {employee.email}</p>\r\n              <p className=\"card-text\"> Phone: {employee.phone}</p>\r\n              <p className=\"card-text\">\r\n                Location: {employee.location.city}, {employee.location.state},{\" \"}\r\n                {employee.location.country}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Employees;\r\n","import React from \"react\";\r\n\r\nconst Button = (props) => {\r\n  const styles = {\r\n    button: {\r\n      marginRight: \"10px\",\r\n      width: \"80px\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <button\r\n      className={`btn waves-effect waves-light btn-dark ${props.color}`}\r\n      style={styles.button}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;","import axios from \"axios\";\r\n\r\nexport default {\r\n  //gets all employees\r\n  getEmployees: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=12&nat=us\" );\r\n  }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport Nav from \"../src/components/Nav.js\"\nimport Employees from \"./components/Employees.js\"\nimport Button from \"./components/Button.js\"\nimport API from \"./utils/API\";\n\nlet styles = {\n  cardDiv: {\n    display: 'flex',\n    flexWrap: \"wrap\",\n  },\n  buttonDiv: {\n    display: 'flex',\n  }\n}\n\nfunction App() {\n\n  const [employees, setEmployees] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  // Load all employees and store them with setEmployees\n  useEffect(() => {\n    showEmployees();\n  }, []);\n\n  useEffect(() => {\n    console.log(search);\n  }, [search]);\n\n  function handleInputChange (event) {\n    const value = event.target.value;\n    const name = event.target.name;\n    setSearch(value);\n  };\n\n  //load all employees\n  function showEmployees() {\n    API.getEmployees()\n      .then((res) => setEmployees(res.data.results))\n      .catch((err) => console.log(err));\n  }\n\n\n//   function sortNames() {\n// employees.sort((a,b) => {\n//   if (a.name.last < b.name.last) {\n//     return -1;\n//   }\n//   if (a.name.last > b.name.last) {\n//     return 1;\n//   } return 0;\n// })\n//   }\n\n  function sortNames() {\n    employees.sort((a,b) => \n    (a.name.last < b.name.last) ? -1 : 1)\n      setEmployees([...employees])\n    }\n  \n\n  return (\n    <div>\n      <Nav />\n\n      <div className=\"container\">\n        <div className=\"input-group mb-3 mt-5\">\n          <div className=\"input-group-prepend\">\n          </div>\n          <input type=\"text\" className=\"form-control\" placeholder=\"Search by Last Name\" onChange={handleInputChange} />\n        </div>\n          <div className=\"mt-5\">\n            <Button text={\"Sort Name\"} onClick={() => sortNames()} />\n          </div>\n          <div className=\"container\" style={styles.cardDiv}>\n            <Employees employees={employees} search ={search} />\n          </div>\n        </div>\n\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}